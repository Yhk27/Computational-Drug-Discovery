# Finding the target protein in chEMBL database & retrieving the bioactivity data


! pip install chembl_webresource_client

# Import necessary libraries
import pandas as pd
from chembl_webresource_client.new_client import new_client

# Target search for aromatase
target = new_client.target
target_query = target.search('aromatase')
targets = pd.DataFrame.from_dict(target_query)
targets

#Select the target protein in this case it is Cytochrome P450
selected_target = targets.target_chembl_id[0]
selected_target

# Retrieving Bioactivity data for Cytochrome P450 that are reported as IC50 values
activity = new_client.activity
res = activity.filter(target_chembl_id=selected_target).filter(standard_type="IC50")
df = pd.DataFrame.from_dict(res)
df.head()

# Filter out the IC50 types 
df.standard_type.unique()
array(['IC50'], dtype=object)

# Saving the bioactivity data to a CSV file
df.to_csv('aromatase_data.csv', index=False)

# Dropping all compounds that have missing standard_value values 

#Labeling compounds as active, inactive, or intermediate. 
# Compounds with values less than 1000nM are considered active, Greater than 10,000nM are considered inactive, compounds in between 1,000 and 10,000nM are connsidered intermediate.
bioactivity_class = []
for i in df2.standard_value:
  if float(i) >= 10000:
    bioactivity_class.append("inactive")
  elif float(i) <= 1000:
    bioactivity_class.append("active")
  else:
    bioactivity_class.append("intermediate")

#Iterating the molecule chembl ID to a list
mol_cid = []
for i in df2.molecule_chembl_id:
  mol_cid.append(i)

#Iterating canonical_smiles to a list
canonical_smiles = []
for i in df2.canonical_smiles:
  canonical_smiles.append(i)
  
#Iterating standard_value to a list 
standard_value = []
for i in df2.standard_value:
  standard_value.append(i)

#combining the 4 lists into a dataframe
data_tuples = list(zip(mol_cid, canonical_smiles, bioactivity_class, standard_value))
df3 = pd.DataFrame( data_tuples,  columns=['molecule_chembl_id', 'canonical_smiles', 'bioactivity_class', 'standard_value'])

#saving the four lists to a CSV file
df3.to_csv('aromatase_preprocessed_data.csv', index=False)

#Installing conda and rdkit
! wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh
! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh
! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p /usr/local
! conda install -c rdkit rdkit -y
import sys
sys.path.append('/usr/local/lib/python3.7/site-packages/')

#loading bioactivity data from aromatase_preprocessed_data.csv
import pandas as pd
df = pd.read_csv('aromatase_preprocessed_data.csv')


# Calculating Lipinski Descriptors
# Lapinkski Descriptors are a set of rule-of-thumb for evaluating the druglikeness of compounds.
# Such druglikeness is based on the Absorption, Distribution, Metabolism and Excretion (ADME) that is also known as the pharmacokinetic profile.
# Lipinski analyzed all orally active FDA-approved drugs in the formulation of what is to be known as the Rule-of-Five or Lipinski's Rule.
# The Lipinski's Rule stated the following:
# Molecular weight < 500 Dalton
# Octanol-water partition coefficient (LogP) < 5
# Hydrogen bond donors < 5
# Hydrogen bond acceptors < 10

#computing descriptors
import numpy as np
from rdkit import Chem
from rdkit.Chem import Descriptors, Lipinski

# Inspired by: https://codeocean.com/explore/capsules?query=tag:data-curation

def lipinski(smiles, verbose=False):

    moldata= []
    for elem in smiles:
        mol=Chem.MolFromSmiles(elem) 
        moldata.append(mol)
       
    baseData= np.arange(1,1)
    i=0  
    for mol in moldata:        
       
        desc_MolWt = Descriptors.MolWt(mol)
        desc_MolLogP = Descriptors.MolLogP(mol)
        desc_NumHDonors = Lipinski.NumHDonors(mol)
        desc_NumHAcceptors = Lipinski.NumHAcceptors(mol)
           
        row = np.array([desc_MolWt,
                        desc_MolLogP,
                        desc_NumHDonors,
                        desc_NumHAcceptors])   
    
        if(i==0):
            baseData=row
        else:
            baseData=np.vstack([baseData, row])
        i=i+1      
    
    columnNames=["MW","LogP","NumHDonors","NumHAcceptors"]   
    descriptors = pd.DataFrame(data=baseData,columns=columnNames)
    
    return descriptors
    
#sets dataframe lipinski based on caonical_smiles which are chemical formulas
df_lipinski = lipinski(df.canonical_smiles)

#combine dataframes

df_combined = pd.concat([df,df_lipinski], axis=1)

# Converting IC50 to pIC50
# To allow IC50 data to be more uniformly distributed, we will convert IC50 to the negative logarithmic scale which is essentially -log10(IC50).
# 
# This custom function pIC50() will accept a DataFrame as input and will:
# 
# Take the IC50 values from the standard_value column and converts it from nM to M by multiplying the value by 10 âˆ’9 
# Take the molar value and apply -log10
# Delete the standard_value column and create a new pIC50 column

import numpy as np

def pIC50(input):
    pIC50 = []

    for i in input['standard_value_norm']:
        molar = i*(10**-9) # Converts nM to M
        pIC50.append(-np.log10(molar))

    input['pIC50'] = pIC50
    x = input.drop('standard_value_norm', 1)
        
    return x
    
-np.log10( (10**-9)* 100000000 )
-np.log10( (10**-9)* 10000000000 )
def norm_value(input):
    norm = []

    for i in input['standard_value']:
        if i > 100000000:
          i = 100000000
        norm.append(i)

    input['standard_value_norm'] = norm
    x = input.drop('standard_value', 1)
        
    return x
    
# Apply the norm_value() function so that the values in the standard_value column is normalized.
df_norm = norm_value(df_combined)
df_norm
df_final = pIC50(df_norm)
df_final

# Remove the intermediate bioactivity class and save the new CSV file
df_2class = df_final[df_final.bioactivity_class != 'intermediate']
df_2class.to_csv('aromatase_bioactivity_pICC50.csv', index=False)


# Calculating molecular descriptors
# Calculating PaDEL-Descriptors
! wget https://github.com/dataprofessor/bioinformatics/raw/master/padel.zip
! wget https://github.com/dataprofessor/bioinformatics/raw/master/padel.sh
! unzip padel.zip

# Loading Bioactivity Data
import pandas as pd
df3 = pd.read_csv('aromatase_bioactivity_pICC50.csv')
selection = ['canonical_smiles','molecule_chembl_id']
df3_selection = df3[selection]
df3_selection.to_csv('molecule.smi', sep='\t', index=False, header=False)
! cat molecule.smi | head -5

# Calculating Fingerprint Descriptors
# Calculating PaDEL Descriptors

! cat padel.sh
! bash padel.sh

# Prepare X and Y Data Matrices
# X Data Matrix 
df3_X = pd.read_csv('descriptors_output.csv')

#dropping the name column
df3_X = df3_X.drop(columns=['Name'])

# convert IC550 to pIC550 for Y Variable
df3_Y = df3['pIC50']

#Combine X and Y Variables
dataset3 = pd.concat([df3_X,df3_Y], axis=1)

#save dataset
dataset3.to_csv('aromatase_3class_pIC50_pubchem_fp.csv', index=False)

#Load data set and fix errors
df = pd.read_csv('aromatase_bioactivity_pIC50_pubchem_fp.csv')
df =df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]

#drop the pIC50 column 
X = df.drop('pIC50', axis=1)

# Remove low variance features
from sklearn.feature_selection import VarianceThreshold
selection = VarianceThreshold(threshold=(.8 * (1 - .8)))    
X = selection.fit_transform(X)

#Build regression model using random forest 
import numpy as np
np.random.seed(100)
model = RandomForestRegressor(n_estimators=100)
model.fit(X_train, Y_train)
r2 = model.score(X_test, Y_test)

# Build Scatter plot of Experimental vs Predicted pIC50 values
import seaborn as sns
import matplotlib.pyplot as plt

sns.set(color_codes=True)
sns.set_style("white")

ax = sns.regplot(Y_test, Y_pred, scatter_kws={'alpha':0.4})
ax.set_xlabel('Experimental pIC50', fontsize='large', fontweight='bold')
ax.set_ylabel('Predicted pIC50', fontsize='large', fontweight='bold')
ax.set_xlim(0, 12)
ax.set_ylim(0, 12)
ax.figure.set_size_inches(5, 5)
plt.show





